<?phpheader("Content-type: text/html; charset=UTF-8"); class ProcessingForm { public $user_email; public $admin_email; public $user_name; public $user_tell; public $message_body; public function __construct() { if ($_SERVER['REQUEST_METHOD'] == "POST") { $form_data = json_decode($_POST['json_form_data']); if (!empty($form_data->call_name)) { $this->user_name = $this->formValid($form_data->call_name); } else $this->user_name = 'Гость'; $this->user_tell = $this->formValid($form_data->call_tell); $this->message_body = "<div style=\"padding: 15px;\"><p style=\"font-size: 14px;\">Клиент <b>{$this->user_name}</b> заказал звонок на номер <b>{$this->user_tell} </b> <br />"; if (!empty($form_data->call_time)) { $this->message_body .= "<b>Время звонка:</b> {$this->formValid($form_data->call_time)} <br />"; } if (!empty($form_data->call_email)) { $this->user_email = $this->formValid($form_data->call_email); $this->message_body .= "<b>Email клиента:</b> {$this->formValid($form_data->call_email)} <br />"; } else $this->user_email = 'Из формы обратного звонка'; if ( !empty($form_data->call_text) ) { $this->message_body .= "<b>Комментарий:</b> {$this->formValid($form_data->call_text)}"; } $this->message_body .= '</p></div><hr />'; $this->sendMail(); die(true); } else { die("Не правильное обращение к файлу!"); } } public function formValid($data) { return strip_tags(trim(stripslashes($data))); } public function validEmail($email) { $pattern = '/\w+@[a-zA-Z_]+?\.[a-zA-Z]{2,6}/'; if (preg_match($pattern, $email) != 1) { return false; } else { return true; } } public function getAdminEmail() { $path = '../config/admin_config.php'; if (file_exists($path)) { require_once $path; return OFFLINE_EMAIL; } else { die('Файл '.$path.' не найден!'); } } public function sendMail() { require 'libmail.php'; $this->admin_email = $this->getAdminEmail(); $mail = new Mail('UTF-8'); $mail->From($this->user_email); $mail->To($this->admin_email); $mail->Subject("Перезвоните мне"); $this->message_body .= $this->getUserInfo(); $mail->Body($this->message_body, "html"); $mail->Priority(3) ; sleep(1); $mail->Send(); } public function getUserInfo() { require 'get_info.php'; $user_info = (array)GetInfo::get(); $user_moving = array_reverse($this->objectToArray(GetInfo::getMoving())); $info = '<div style="float: left; width: 779px; height: 450px;">'; $info .= '<div style="float: left;width: 300px;box-shadow: inset 0 0 10px #777;height: 100%;min-height: 100%;border-right: 1px solid #444;"><div style="padding-top: 5px; background: #548FD3; color: white;font-size: 18px;height: 29px;text-align: center;font-family: "Helvetica", sans-serif;border-bottom: 1px solid #859199;text-shadow: 0px 1px 1px #666;">Информация</div>'; $info .= '<div style="padding: 10px;">'; foreach ($user_info as $key => $value) { if(empty($value)) continue; if ($key == "referer") { $key = $this->getRussName($key); $info .= '<div style="float: left;width: 100%;margin: 0;color: #00262F;font-size: 13px;text-align: left;font-family: tahoma, arial, verdana, sans-serif, Lucida Sans; border-bottom: 1px solid #D8D8D8;"><div style="float: left;width: 35%;padding: 4px;font-weight: 700;font-size: 11px;">'.$key.': </div><div style="float: left;width: 55%;padding: 4px;border-left: 1px solid #E2E2E2;overflow-x: hidden;"><a href="'.$value.'">'.$value.'</a></div></div>'; } else { $key = $this->getRussName($key); $info .= '<div style="float: left;width: 100%;margin: 0;color: #00262F;font-size: 13px;text-align: left;font-family: tahoma, arial, verdana, sans-serif, Lucida Sans; border-bottom: 1px solid #D8D8D8;"><div style="float: left;width: 35%;padding: 4px;font-weight: 700;font-size: 11px;">'.$key.': </div><div style="float: left;width: 55%;padding: 4px;border-left: 1px solid #E2E2E2;overflow-x: hidden;">'.$value.'</div></div>'; } } $info .= '</div></div>'; $info .= '<div style="float: left;width: 478px;box-shadow: inset 0 0 10px #777;height: 100%;min-height: 100%;"><div style="padding-top: 5px;margin: 0;background: #548FD3;color: white;font-size: 18px;height: 29px;text-align: center;font-family: "Helvetica", sans-serif;border-bottom: 1px solid #859199;text-shadow: 0px 1px 1px #666;background: #548FD3;">Пути по сайту (новые вверху)</div>'; $info .= '<div style="overflow: auto;height: 415px;padding: 10px;box-sizing: border-box;-moz-box-sizing: border-box;-webkit-box-sizing: border-box;">'; $last_time = time(); foreach ($user_moving as $moving) { $moving['call_time'] = $last_time - $moving['call_time']; $info .= '<div style="overflow-x: hidden;border-bottom: 1px solid #859199;padding: 5px;"><p style="margin: 0px 0px 5px;color: #1B5A9C;font-size: 12px;font-weight: bold;text-align: left;font-family: tahoma, arial, verdana, sans-serif, Lucida Sans;"><a href="'.$moving['call_href'].'" target="_blank">'.$moving['call_title'].'</a></p><p style="margin: 2px;color: #999;font-size: 11px;font-weight: bold;text-align: left;font-family: tahoma, arial, verdana, sans-serif, Lucida Sans;"> <span style="float: left;">'.$moving['call_href'].'</span> <span style="float: right;">'.$moving['call_time'].' сек.</span></p></div>'; $last_time = $last_time - $moving['call_time']; } $info .= '</div></div>'; $info .= '</div>'; return $info; } private function getRussName($val) { switch ($val) { case "ip": return 'IP адрес'; case "country": return 'Страна'; case "city": return 'Город'; case "region_name": return 'Регион'; case "timezone": return 'Временная зона'; case "browser": return 'Браузер'; case "version": return "Версия"; case "os": return 'ОС'; case "code": return 'Язык'; case "referer": return 'Источник'; case "visit": return 'Визиты'; case "last_visit": return 'Последний визит'; case "search_engine": return 'Поисковик'; case "query_value": return 'Запрос'; } } public function objectToArray( $object ) { if (!is_object( $object ) && !is_array($object)) { return $object; } if (is_object($object )) { $object = get_object_vars( $object ); } return array_map( array('ProcessingForm','objectToArray'), $object ); } } $obj = new ProcessingForm(); ?>